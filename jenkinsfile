node {
    deleteDir()
    stage 'Build components'
    def engineType = 'WarpEngine'

    parallel(
        "warp-coils":       { component1 = build 'warp-coils-npm' },
        "intercooler":      { component2 = build 'intercooler-gems' },
        "power-unit":       { component3 = build 'power-unit-maven' },
        "field-impeller":   { component4 = build 'field-impeller-gradle' }
    )

    stage 'Resolve components'
    def buildInfo = Artifactory.newBuildInfo()
    resolve('warp-coils',     component1, buildInfo)
    resolve('intercooler',    component2, buildInfo)
    resolve('power-unit',     component3, buildInfo)
    resolve('field-impeller', component4, buildInfo)

    stage 'Create engine'
    createEngine(engineType, buildInfo)

    stage 'Test engine'
    testEngine()

    stage 'Deploy engine'
    deployEngine(engineType, buildInfo)

    stage 'Send to production'
    sendToProduction()
}

def resolve(buildName, build, buildInfo) {
    def props = build.buildVariables['BUILD_PROPS']
    def downloadSpec = """{
        "files": [{
            "pattern": "engine-virtual-repo/*",
            "target": "Engine/${buildName}/",
            "props": "${props}",
            "recursive":"true",
            "flat":"true"
        }]
    }
    """

    Artifactory.server('A1').download(downloadSpec, buildInfo)
}

def createEngine(engineType, buildInfo) {
    withEnv(["ENGINE_TYPE=${engineType}"]) {
        //Add include and collect env vars.
        buildInfo.env.filter.addInclude("ENGINE_TYPE")
        buildInfo.env.collect()

        //Create Warp engine
        zip dir: 'Engine', glob: '', zipFile: env.ENGINE_TYPE + '.zip'
    }
}

def testEngine() {
    //do some testing...
    echo 'All tests was successful'
}

def deployEngine(engineType, buildInfo) {
    def uploadSpec = """{
        "files": [{
            "pattern": "${engineType}*",
            "target": "engine/Engine/${engineType}/${env.BUILD_ID}/"
        }]
    }
    """

    def server = Artifactory.server('A1')
    server.upload(uploadSpec, buildInfo)
    server.publishBuildInfo(buildInfo)
}

def sendToProduction() {
    def server = Artifactory.server('A1')
    def pCfg = Artifactory.newPromotionConfig(env.JOB_NAME, env.BUILD_ID, "engine-prod")

    pCfg.comment = "Send engine to production"
    pCfg.targetStatus = "Released"
    pCfg.useCopy = true

    server.promote(pCfg)
}